{"ast":null,"code":"import { __extends, __read, __spreadArray } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destination) {\n    var _this = _super.call(this) || this;\n\n    _this.isStopped = false;\n\n    if (destination) {\n      _this.destination = destination;\n\n      if (isSubscription(destination)) {\n        destination.add(_this);\n      }\n    } else {\n      _this.destination = EMPTY_OBSERVER;\n    }\n\n    return _this;\n  }\n\n  Subscriber.create = function (next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.isStopped = true;\n\n      _super.prototype.unsubscribe.call(this);\n\n      this.destination = null;\n    }\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  Subscriber.prototype._complete = function () {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  return Subscriber;\n}(Subscription);\n\nexport { Subscriber };\nvar _bind = Function.prototype.bind;\n\nfunction bind(fn, thisArg) {\n  return _bind.call(fn, thisArg);\n}\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    var next;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete;\n      var context_1;\n\n      if (_this && config.useDeprecatedNextContext) {\n        context_1 = Object.create(observerOrNext);\n\n        context_1.unsubscribe = function () {\n          return _this.unsubscribe();\n        };\n      } else {\n        context_1 = observerOrNext;\n      }\n\n      next = next && bind(next, context_1);\n      error = error && bind(error, context_1);\n      complete = complete && bind(complete, context_1);\n    }\n\n    _this.destination = {\n      next: next ? wrapForErrorHandling(next, _this) : noop,\n      error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, _this),\n      complete: complete ? wrapForErrorHandling(complete, _this) : noop\n    };\n    return _this;\n  }\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexport { SafeSubscriber };\n\nfunction wrapForErrorHandling(handler, instance) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      handler.apply(void 0, __spreadArray([], __read(args)));\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n\nfunction defaultErrorHandler(err) {\n  throw err;\n}\n\nfunction handleStoppedNotification(notification, subscriber) {\n  var onStoppedNotification = config.onStoppedNotification;\n  onStoppedNotification && timeoutProvider.setTimeout(function () {\n    return onStoppedNotification(notification, subscriber);\n  });\n}\n\nexport var EMPTY_OBSERVER = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop\n};","map":{"version":3,"mappings":"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","names":["isFunction","isSubscription","Subscription","config","reportUnhandledError","noop","nextNotification","errorNotification","COMPLETE_NOTIFICATION","timeoutProvider","captureError","__extends","destination","_super","_this","add","EMPTY_OBSERVER","Subscriber","next","error","complete","SafeSubscriber","value","isStopped","handleStoppedNotification","_next","err","_error","_complete","closed","unsubscribe","call","_bind","Function","prototype","bind","fn","thisArg","observerOrNext","context_1","useDeprecatedNextContext","Object","create","wrapForErrorHandling","defaultErrorHandler","handler","instance","args","__spreadArray","useDeprecatedSynchronousErrorHandling","notification","subscriber","onStoppedNotification","setTimeout"],"sources":["C:\\Users\\Влад\\OneDrive\\Рабочий стол\\stopwatch\\sw\\node_modules\\rxjs\\src\\internal\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let next: ((value: T) => void) | undefined;\n    if (isFunction(observerOrNext)) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      // The first argument is an observer object, we have to pull the handlers\n      // off and capture the owner object as the context. That is because we're\n      // going to put them all in a new destination with ensured methods\n      // for `next`, `error`, and `complete`. That's part of what makes this\n      // the \"Safe\" Subscriber.\n      ({ next, error, complete } = observerOrNext);\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n      next = next && bind(next, context);\n      error = error && bind(error, context);\n      complete = complete && bind(complete, context);\n    }\n\n    // Once we set the destination, the superclass `Subscriber` will\n    // do it's magic in the `_next`, `_error`, and `_complete` methods.\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error ?? defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop,\n    };\n  }\n}\n\n/**\n * Wraps a user-provided handler (or our {@link defaultErrorHandler} in one case) to\n * ensure that any thrown errors are caught and handled appropriately.\n *\n * @param handler The handler to wrap\n * @param instance The SafeSubscriber instance we're going to mark if there's an error.\n */\nfunction wrapForErrorHandling(handler: (arg?: any) => void, instance: SafeSubscriber<any>) {\n  return (...args: any[]) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        // Ideal path, we report this as an unhandled error,\n        // which is thrown on a new call stack.\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n"]},"metadata":{},"sourceType":"module"}